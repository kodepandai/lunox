"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[7976],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1007:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(1163),o=(t(9496),t(9613));const i={sidebar_position:9},a="Error Handling",s={unversionedId:"basics/errors",id:"basics/errors",title:"Error Handling",description:"Introduction",source:"@site/docs/basics/errors.md",sourceDirName:"basics",slug:"/basics/errors",permalink:"/id/docs/basics/errors",editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/errors.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Validation",permalink:"/id/docs/basics/validation"},next:{title:"Artisan Console",permalink:"/id/docs/digging-deeper/artisan-console"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"The Exception Handler",id:"the-exception-handler",children:[{value:"Reporting Exception",id:"reporting-exception",children:[],level:3},{value:"Ignoring Exceptions By Type",id:"ignoring-exceptions-by-type",children:[],level:3},{value:"Rendering Exception",id:"rendering-exception",children:[],level:3},{value:"Http Exceptions",id:"http-exceptions",children:[],level:3}],level:2}],l={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"error-handling"},"Error Handling"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Error and Exception handling is already  configured by Lunox. The ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Exceptions/Handler.ts")," file is where all exceptions thrown by your application and then reported and rendered to the user."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"By default the ",(0,o.kt)("inlineCode",{parentName:"p"},"APP_DEBUG")," environment variable is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", this is usefull for local development where you can see the error information more detail. In your production environment, this value should always be ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("h2",{id:"the-exception-handler"},"The Exception Handler"),(0,o.kt)("h3",{id:"reporting-exception"},"Reporting Exception"),(0,o.kt)("p",null,"All exceptions are handled by the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/Exceptions/Handler")," class. This class contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"register")," method where you may register custom exception reporting and rendering callbacks. Exception reporting is used to log exceptions. We may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"reportable")," method to register a closure that should be executed when an exception of a given type needs to be reported."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import ApiException from "app/Exceptions/ApiException";\n\nregister(){\n    this.reportable(ApiException, (e) => {\n      if (e.status >= 500) {\n        console.log("API Error", e);\n      }\n    });\n}\n')),(0,o.kt)("h3",{id:"ignoring-exceptions-by-type"},"Ignoring Exceptions By Type"),(0,o.kt)("p",null,"When building your application, there will be some types of exceptions you simply want to ignore and never report. Your application's exception handler contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"dontReport")," property which is initialized to an empty array. Any classes that you add to this property will never be reported; however, they may still have custom rendering logic:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import InvalidOrderException from 'app/Exceptions/InvalidOrderException';\n\nprotected dontReport = [\n    InvalidOrderException\n]\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'Behind the scenes, Lunox already ignores some types of errors for you, such as exceptions resulting from 404 HTTP "not found" errors or 419 HTTP responses generated by invalid CSRF tokens.'))),(0,o.kt)("h3",{id:"rendering-exception"},"Rendering Exception"),(0,o.kt)("p",null,"You are free to register a custom rendering closure for exceptions of a given type. You may accomplish this via the ",(0,o.kt)("inlineCode",{parentName:"p"},"renderable")," method of your exception handler. This closure should return instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Http Response")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"view Factory"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {ValidationException, HttpException} from 'lunox';\n\nregister(){\n    this.renderable(ValidationException, (e, req) => {\n      if (req.wantsJson()) {\n        return Response.make(\n          {\n            message: e.message,\n            errors: e.errors(),\n            status: 422,\n          },\n          422\n        );\n      }\n\n      return back().withInput().with({\n        errors: e.errors(),\n      });\n    });\n\n    this.renderable(HttpException, (e, req) => {\n      if (req.wantsJson()) {\n        return Response.make(\n          {\n            message: e.message,\n            status: e.getStatusCode(),\n          },\n          e.getStatusCode()\n        );\n      }\n      return view(\"_error\", { message: e.message, code: e.getStatusCode() });\n    });\n}\n")),(0,o.kt)("h3",{id:"http-exceptions"},"Http Exceptions"),(0,o.kt)("p",null,'Some exceptions describe HTTP error codes from the server. For example, this may be a "page not found" error (404), an "unauthorized error" (401) or even a developer generated 500 error. In order to generate such a response from anywhere in your application, you may use the ',(0,o.kt)("inlineCode",{parentName:"p"},"abort")," helper:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"abort(404);\n")))}d.isMDXComponent=!0}}]);