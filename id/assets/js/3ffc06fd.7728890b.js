"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[2524],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var s=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?s.createElement(f,r(r({ref:t},u),{},{components:n})):s.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:i,r[1]=a;for(var c=2;c<o;c++)r[c]=n[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(1163),i=(n(9496),n(9613));const o={sidebar_position:7},r="Session",a={unversionedId:"basics/session",id:"basics/session",title:"Session",description:"Introduction",source:"@site/i18n/id/docusaurus-plugin-content-docs/current/basics/session.md",sourceDirName:"basics",slug:"/basics/session",permalink:"/id/docs/basics/session",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/session.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/id/docs/basics/views"},next:{title:"Validation",permalink:"/id/docs/basics/validation"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Interacting With The Session",id:"interacting-with-the-session",level:2},{value:"Retrieving Data",id:"retrieving-data",level:3},{value:"Storing Data",id:"storing-data",level:3},{value:"Determining If An Item Exists In The Session",id:"determining-if-an-item-exists-in-the-session",level:3},{value:"Deleting Data",id:"deleting-data",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"session"},"Session"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests. That user information is typically placed in a persistent store / backend that can be accessed from subsequent requests."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Your application's session configuration file is stored at ",(0,i.kt)("inlineCode",{parentName:"p"},"config/session.ts"),". Be sure to review the options available to you in this file. For now, Lunox configured to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," session driver, which will work well for many applications. We will support other session driver in the future. Session files are stored under ",(0,i.kt)("inlineCode",{parentName:"p"},"storeage/framework/sessions")," folder. So make sure this folder is writable."),(0,i.kt)("h2",{id:"interacting-with-the-session"},"Interacting With The Session"),(0,i.kt)("h3",{id:"retrieving-data"},"Retrieving Data"),(0,i.kt)("p",null,"There is only one way to access session, that is via ",(0,i.kt)("inlineCode",{parentName:"p"},"Http Request")," instance. For now there is no global helper ",(0,i.kt)("inlineCode",{parentName:"p"},"session")," like Laravel does because of how nodejs work. We still doing research of posibility to access Session and Http Request in global. Please see discussion ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kodepandai/lunox/discussions/22"},"here"),". So for now, this is how we can access the session instance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// via route action\nRoute.get('/profile', (req: Request) => {\n    req.session() // access session instance here\n    req.session().all() // get all session object\n    req.session().get('key') // Retrieve a piece of data from the session.\n});\n\n// or via controller method\nclass UserController extends Controller {\n    profile(req){\n        // access session instance here\n        req.session()\n        // ...etc\n    }\n}\n")),(0,i.kt)("h3",{id:"storing-data"},"Storing Data"),(0,i.kt)("p",null,"To store data in the session, use ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"req.session().put('key', 'value')\n")),(0,i.kt)("h3",{id:"determining-if-an-item-exists-in-the-session"},"Determining If An Item Exists In The Session"),(0,i.kt)("p",null,"To determine if an item is present in the session, you may use the has method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"has")," method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the item is present and is not ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"req.session().has('key')\n")),(0,i.kt)("p",null,"To determine if an item is present in the session, even if its value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"exists")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"req.session().exists('key')\n")),(0,i.kt)("h3",{id:"deleting-data"},"Deleting Data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"forget")," method will remove a piece of data from the session. If you would like to remove all data from the session, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"flush")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"req.session().forget(['key1', 'key2']) // Remove piece of data from session\nreq.sesson().flush() // Remove all data from session\n")))}d.isMDXComponent=!0}}]);