"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[1869],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>v});var i=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,v=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?i.createElement(v,o(o({ref:t},d),{},{components:n})):i.createElement(v,o({ref:t},d))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=n(1163),a=(n(9496),n(9613));const r={sidebar_position:8},o="Validation",l={unversionedId:"basics/validation",id:"version-1.x/basics/validation",title:"Validation",description:"Introduction",source:"@site/versioned_docs/version-1.x/basics/validation.md",sourceDirName:"basics",slug:"/basics/validation",permalink:"/docs/1.x/basics/validation",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/versioned_docs/version-1.x/basics/validation.md",tags:[],version:"1.x",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Session",permalink:"/docs/1.x/basics/session"},next:{title:"Error Handling",permalink:"/docs/1.x/basics/errors"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Writing Validation Logic",id:"writing-validation-logic",level:2},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Extending Rules",id:"extending-rules",level:2},{value:"Writing Custom Rules",id:"writing-custom-rules",level:3},{value:"Registering Custom Rules",id:"registering-custom-rules",level:3}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validation"},"Validation"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Lunox has builtin validation system, it's can validate your applicatoin's incoming data through Http Request. The common way is using ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," method available on Http Request instance."),(0,a.kt)("h2",{id:"writing-validation-logic"},"Writing Validation Logic"),(0,a.kt)("p",null,"Take an example, we have some method on Controller. We want to validate the incoming request data to it. Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," method is asynchronous."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class UserController extends Controller {\n    async store(req){\n        await req.validate([\n            'title' => 'required|unique:posts,title|maxLength:255'.\n            'body' => 'required'\n        ])\n    }\n}\n")),(0,a.kt)("p",null,"When validation fails, ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationException")," will thrown."),(0,a.kt)("h2",{id:"validation-rules"},"Validation Rules"),(0,a.kt)("p",null,"Under the hood, Lunox use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bitnbytesio/node-input-validator"},"node-input-validator"),". So, we can use all available rules ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bitnbytesio/node-input-validator#rules"},"here")," plus additional rule like ",(0,a.kt)("inlineCode",{parentName:"p"},"unique")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mimes"),"."),(0,a.kt)("h2",{id:"extending-rules"},"Extending Rules"),(0,a.kt)("h3",{id:"writing-custom-rules"},"Writing Custom Rules"),(0,a.kt)("p",null,"Rule is just object with interface of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rule")," from Validation contracts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Rule } from "lunox/dist/Contracts/Validation";\n\nconst Even: Rule = {\n  name: "even",\n  passes: async (args, value) => {\n    return value % 2;\n  },\n  message: "The :attr must be an even number.",\n};\n\nexport default Even;\n\n')),(0,a.kt)("h3",{id:"registering-custom-rules"},"Registering Custom Rules"),(0,a.kt)("p",null,"We can extend validation rules using method ",(0,a.kt)("inlineCode",{parentName:"p"},"extend")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"Validation")," facade on ",(0,a.kt)("inlineCode",{parentName:"p"},"boot")," method of ServiceProvider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {Validator} from "lunox";\nimport Even from "./Rules/Even";\nimport Mimes from "./Rules/Mimes";\n\nclass AppServiceProvider extends ServiceProvider {\n  async register() {\n    // \n  }\n  async boot() {\n    Validator.extend(Even);\n  }\n}\n')),(0,a.kt)("p",null,"Then we can use it in our validation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await req.validate([\n    'total' => 'required|even'\n]);\n")))}p.isMDXComponent=!0}}]);