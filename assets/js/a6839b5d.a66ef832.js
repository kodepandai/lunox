"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[6633],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var s=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?s.createElement(f,o(o({ref:t},u),{},{components:n})):s.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[c]="string"==typeof e?e:i,o[1]=a;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var s=n(1163),i=(n(9496),n(9613));const r={sidebar_position:7},o="Session",a={unversionedId:"basics/session",id:"basics/session",title:"Session",description:"Introduction",source:"@site/docs/basics/session.md",sourceDirName:"basics",slug:"/basics/session",permalink:"/docs/basics/session",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/session.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/basics/views"},next:{title:"Validation",permalink:"/docs/basics/validation"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Interacting With the Session",id:"interacting-with-the-session",level:2},{value:"Retrieving Data",id:"retrieving-data",level:3},{value:"Storing Data",id:"storing-data",level:3},{value:"Determining If an Item Exists in the Session",id:"determining-if-an-item-exists-in-the-session",level:3},{value:"Deleting Data",id:"deleting-data",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"session"},"Session"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Since HTTP-driven applications are stateless, sessions provide a way to store information about the user across multiple requests. This user information is typically stored in a persistent store or backend that can be accessed in subsequent requests."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"To access the session in Lunox, you need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"@lunoxjs/session")," and register the ",(0,i.kt)("inlineCode",{parentName:"p"},"SessionServiceProvider")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"config/app.ts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pnpm add @lunoxjs/session\n")),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Your application's session configuration file is located at ",(0,i.kt)("inlineCode",{parentName:"p"},"config/session.ts"),". Make sure to review the available options in this file. Currently, Lunox is configured to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," session driver, which works well for many applications. We will support other session drivers in the future. Session files are stored under the ",(0,i.kt)("inlineCode",{parentName:"p"},"storage/framework/sessions")," folder, so ensure that this folder is writable."),(0,i.kt)("h2",{id:"interacting-with-the-session"},"Interacting With the Session"),(0,i.kt)("h3",{id:"retrieving-data"},"Retrieving Data"),(0,i.kt)("p",null,"The only way to access the session in Lunox is through the ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpRequest")," instance. For global access, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"request().session()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Via route action\nRoute.get("/profile", (req: Request) => {\n  req.session(); // Access the session instance here\n  req.session().all(); // Get all session data\n  req.session().get("key"); // Retrieve a piece of data from the session\n});\n\n// Or via a controller method\nclass UserController extends Controller {\n  profile(req) {\n    // Access the session instance here\n    req.session();\n    // ...etc\n  }\n}\n\n// via global request() helper\nrequest().session();\n')),(0,i.kt)("h3",{id:"storing-data"},"Storing Data"),(0,i.kt)("p",null,"To store data in the session, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"put")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'req.session().put("key", "value");\n')),(0,i.kt)("h3",{id:"determining-if-an-item-exists-in-the-session"},"Determining If an Item Exists in the Session"),(0,i.kt)("p",null,"To check if an item is present in the session, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"has")," method. It returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the item is present and not ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'req.session().has("key");\n')),(0,i.kt)("p",null,"To determine if an item exists in the session, even if its value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", use the ",(0,i.kt)("inlineCode",{parentName:"p"},"exists")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'req.session().exists("key");\n')),(0,i.kt)("h3",{id:"deleting-data"},"Deleting Data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"forget")," method removes a piece of data from the session. If you want to remove all data from the session, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"flush")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'req.session().forget(["key1", "key2"]); // Remove a piece of data from the session\nreq.session().flush(); // Remove all data from the session\n')))}d.isMDXComponent=!0}}]);