"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[2180],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(1163),a=(n(9496),n(9613));const o={sidebar_position:6},i="Views",s={unversionedId:"basics/views",id:"basics/views",title:"Views",description:"Introduction",source:"@site/docs/basics/views.md",sourceDirName:"basics",slug:"/basics/views",permalink:"/docs/basics/views",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/views.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"HTTP Responses",permalink:"/docs/basics/responses"},next:{title:"Session",permalink:"/docs/basics/session"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Supported Template Engines",id:"supported-template-engines",level:2},{value:"Creating a View",id:"creating-a-view",level:2},{value:"Nested Views",id:"nested-views",level:3},{value:"Passing Data to a View",id:"passing-data-to-a-view",level:3},{value:"Accessing the HTTP Request from a View",id:"accessing-the-http-request-from-a-view",level:3},{value:"Client Helper",id:"client-helper",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"views"},"Views"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Views provide a convenient way to separate your HTML code into separate files. Views help separate your controller/application logic from your presentation logic and are stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/view")," directory. In Laravel, views use the ",(0,a.kt)("inlineCode",{parentName:"p"},"blade")," templating engine. However, Lunox leverages the existing frontend frameworks available for Node.js, such as React and Svelte."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"To use views in Lunox, you need to install ",(0,a.kt)("inlineCode",{parentName:"p"},"@lunoxjs/view")," and the plugin for your chosen view engine. Don't forget to register ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewServiceProvider")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"config/app.ts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm add @lunoxjs/view\n\n# For the svelte engine\npnpm add @lunoxjs/view-plugin-svelte\n# For the react engine\npnpm add @lunoxjs/view-plugin-react\n")),(0,a.kt)("p",null,"Alternatively, you can choose a preset with a view when creating a Lunox app using ",(0,a.kt)("inlineCode",{parentName:"p"},"pnpm create lunox-app"),"."),(0,a.kt)("h2",{id:"supported-template-engines"},"Supported Template Engines"),(0,a.kt)("p",null,"Currently, Lunox supports the following template engines:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Engine"),(0,a.kt)("th",{parentName:"tr",align:null},"Example of Usage"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Svelte"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/kodepandai/lunox/tree/next/presets/svelte"},"Svelte preset"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"React"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/kodepandai/lunox/tree/next/presets/react"},"React preset"))))),(0,a.kt)("p",null,"Feel free to suggest and vote for more template engines ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kodepandai/lunox/discussions/23"},"here"),"."),(0,a.kt)("h2",{id:"creating-a-view"},"Creating a View"),(0,a.kt)("p",null,"Creating a view is simple. Just create a ",(0,a.kt)("inlineCode",{parentName:"p"},"svelte")," file (",(0,a.kt)("inlineCode",{parentName:"p"},".tsx")," or ",(0,a.kt)("inlineCode",{parentName:"p"},".jsx")," if you are using the React preset) inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/view")," directory. For example, let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"welcome")," view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- resources/view/welcome.svelte --\x3e\n<h1>Hello World</h1>\n")),(0,a.kt)("p",null,"Or, if you are using the React preset, create a React component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// resources/view/welcome.tsx\nconst Welcome = (props) => {\n  return <h1>Hello World</h1>;\n};\nexport default Welcome;\n")),(0,a.kt)("p",null,"The Svelte and React file will be automatically converted to a native JavaScript file using the powerful ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite.js")," build tool. During development, Vite.js supports Hot Module Replacement (HMR), so if you make changes to the view file, the browser will automatically refresh the content without a full page refresh."),(0,a.kt)("p",null,"To access the ",(0,a.kt)("inlineCode",{parentName:"p"},"welcome")," view that we created, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," global method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Route.get("/", () => {\n  return view("welcome");\n});\n')),(0,a.kt)("h3",{id:"nested-views"},"Nested Views"),(0,a.kt)("p",null,"If your view is located in a nested folder, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/view/admin/manage-user.svelte"),", you can access it using dot notation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'return view("admin.manage-user");\n')),(0,a.kt)("h3",{id:"passing-data-to-a-view"},"Passing Data to a View"),(0,a.kt)("p",null,"Similar to component props in React, Vue, or Svelte, you can pass data from the route (or controller) to the view using props."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'return view("welcome", { message: "Hello World" });\n')),(0,a.kt)("p",null,"Then, in the view file, the data will be available as component props."),(0,a.kt)("p",null,"Example using a Svelte component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'<script lang="ts">\n    export let message;\n<\/script>\n\x3c!-- Render the prop using curly braces --\x3e\n<h1>{message}</h1>\n')),(0,a.kt)("p",null,"Example using a React component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const Welcome = ({ message }) => {\n  return <h1>{message}</h1>;\n};\n\nexport default Welcome;\n")),(0,a.kt)("h3",{id:"accessing-the-http-request-from-a-view"},"Accessing the HTTP Request from a View"),(0,a.kt)("p",null,"You cannot directly access the server's HTTP request data in a view. To overcome this limitation, Lunox provides the ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," method to access the HTTP request instance. This method should be exported in the module context. The ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," method is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"getInitialProps")," in the Next.js framework and only runs on the server side."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'<script lang="ts" context="module">\n    import type { OnServer } from \'@lunoxjs/core/contracts\';\n    export const onServer: OnServer = async (req) => {\n        // req is the HTTP request instance\n        // Everything returned from this method will be injected into the component props\n        return {\n            user: await req.auth().user()\n        };\n    };\n<\/script>\n\n<script lang="ts">\n    export let message;\n    export let user; // Now we can access the user object returned from the onServer method\n<\/script>\n\n<h1>{message}</h1>\n{#if user}\n    <strong>Hi, {user.username}</strong>\n{/if}\n')),(0,a.kt)("p",null,"For the React preset, you can export the ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," constant within the component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import type { OnServer } from "@lunoxjs/core/contracts";\n\nexport const onServer: OnServer = async (req) => {\n  // req is the HTTP request instance\n  // Everything returned from this method will be injected into the component props\n  return {\n    user: await req.auth().user(),\n  };\n};\n\nconst Welcome = ({ message, user }) => {\n  return (\n    <>\n      <h1>{message}</h1>\n      {user && <strong>Hi, {user.username}</strong>}\n    </>\n  );\n};\n\nexport default Welcome;\n')),(0,a.kt)("h2",{id:"client-helper"},"Client Helper"),(0,a.kt)("p",null,"The Lunox view also provides a client helper that you can use in your views. To use the client helper, you need to import the ",(0,a.kt)("inlineCode",{parentName:"p"},"csrf_token"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"old"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"session")," functions from ",(0,a.kt)("inlineCode",{parentName:"p"},"@lunoxjs/view/client"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { csrf_token, old, session } from "@lunoxjs/view/client";\n')),(0,a.kt)("p",null,"Once imported, you can use these helper functions anywhere in your view."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'onMount(() => {\n  // Show message from flashed session\n  if (session("message")) {\n    alert(session("message"));\n  }\n});\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"csrf_token()")," function can be used to generate a CSRF token value that can be included in your form submission."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<input type="hidden" name="_token" value="{csrf_token()}" />\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"old()")," function can be used to retrieve the previous input value of a form field. This is useful when you want to repopulate the form with the user's previous input, especially when there are validation errors."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<input\n  type="text"\n  name="user_name"\n  placeholder="username or email"\n  value={old("user_name")}\n/>\n')),(0,a.kt)("p",null,"By using these client helpers, you can enhance the functionality and user experience of your views in Lunox."))}m.isMDXComponent=!0}}]);