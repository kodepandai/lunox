"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[3645],{9613:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var a=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=o,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2610:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=t(5900),o=t(4750),i=(t(9496),t(9613)),r=["components"],l={sidebar_position:1},s="Artisan Console",p={unversionedId:"digging-deeper/artisan-console",id:"digging-deeper/artisan-console",title:"Artisan Console",description:"Introduction",source:"@site/docs/digging-deeper/artisan-console.md",sourceDirName:"digging-deeper",slug:"/digging-deeper/artisan-console",permalink:"/lunox/docs/digging-deeper/artisan-console",editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/digging-deeper/artisan-console.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Error Handling",permalink:"/lunox/docs/basics/errors"}},d=[{value:"Introduction",id:"introduction",children:[{value:"Tinker (REPL)",id:"tinker-repl",children:[{value:"Usage",id:"usage",children:[],level:4},{value:"Tinker Helper",id:"tinker-helper",children:[],level:4}],level:3}],level:2},{value:"Writing Commands",id:"writing-commands",children:[{value:"Generating Commands",id:"generating-commands",children:[],level:3},{value:"Command Structure",id:"command-structure",children:[],level:3}],level:2},{value:"Defining Input Expectations",id:"defining-input-expectations",children:[{value:"Arguments",id:"arguments",children:[],level:3},{value:"Options",id:"options",children:[],level:3},{value:"Options With Values",id:"options-with-values",children:[],level:3},{value:"Option Shortcut",id:"option-shortcut",children:[],level:3},{value:"Input Descriptions",id:"input-descriptions",children:[],level:3}],level:2},{value:"Command I/O",id:"command-io",children:[{value:"Retrieving Input",id:"retrieving-input",children:[],level:3},{value:"Writing Output",id:"writing-output",children:[],level:3}],level:2},{value:"Registering Commands",id:"registering-commands",children:[],level:2}],u={toc:d};function m(e){var n=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"artisan-console"},"Artisan Console"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Artisan is the command line interface included with lunox. Artisan exists at the root of your application as the ",(0,i.kt)("inlineCode",{parentName:"p"},"artisan.ts")," script and provides a number of helpful commands that can assist you while you build your application. To view a list of all available Artisan commands, you may use the list command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pnpm artisan -h\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"lunox app must be compiled before you can run artisan command. So make sure you have run ",(0,i.kt)("inlineCode",{parentName:"p"},"pnpm artisan prod")," in production mode or ",(0,i.kt)("inlineCode",{parentName:"p"},"pnpm artisan dev")," in development mode."))),(0,i.kt)("h3",{id:"tinker-repl"},"Tinker (REPL)"),(0,i.kt)("p",null,"Lunox Tinker is a powerful REPL for the Lunox framework, powered by the nodejs builtin REPL."),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Tinker allows you to interact with your entire Lunox application on the command line, including your models, facade, container and more. To enter the Tinker environment, run the tinker Artisan command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pnpm artisan tinker\n")),(0,i.kt)("h4",{id:"tinker-helper"},"Tinker Helper"),(0,i.kt)("p",null,"There is limitation in Tinker environment because of nodejs REPL cannot do top import. For this reason, Lunox Tinker already shipped usefull helper. Just call ",(0,i.kt)("inlineCode",{parentName:"p"},"use")," method to import module from app folder or from lunox framework directly. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"//example how to import module from app folder\nuse('app/Model/User')\n\nawait User.query()\n\n//example how to import lunox module\nuse(\"DB\")\n\nawait DB.table('users')\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Lunox Tinker demo",src:t(3672).Z})),(0,i.kt)("h2",{id:"writing-commands"},"Writing Commands"),(0,i.kt)("p",null,"In addition to the commands provided with Artisan, you may build your own custom commands. Commands are stored in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/Console/Commands")," directory."),(0,i.kt)("h3",{id:"generating-commands"},"Generating Commands"),(0,i.kt)("p",null,"To create a new command, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"make:command")," Artisan command. This command will create a new command class in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/Console/Commands")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm artisan make:command BackupDatabase\n")),(0,i.kt)("h3",{id:"command-structure"},"Command Structure"),(0,i.kt)("p",null,"After generating your command, you should define appropriate values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"description")," properties of the class. These properties will be used when displaying your command on the list screen. The signature property also allows you to define your command's input expectations. The ",(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method will be called when your command is executed. You may place your command logic in this method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Command } from "lunox";\nclass BackupDatabase extends Command {\n    /**\n     * The name and signature of the console command.\n     */\n    protected signature: string = "db:backup";\n\n     /**\n     * The console command description.\n     */ \n    protected description: string = "Backup Database to drive";\n\n    /**\n     * Execute the console command.\n     */\n    public async handle() {\n        this.info("Starting database backup...");\n        // doing backup here\n        this.info("Backup Completed");\n        return this.SUCCESS;\n    }\n}\n\nexport default BackupDatabase;\n\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method should return ",(0,i.kt)("inlineCode",{parentName:"p"},"SUCCESS"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"FAILURE")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"INVALID")," constant;"))),(0,i.kt)("h2",{id:"defining-input-expectations"},"Defining Input Expectations"),(0,i.kt)("p",null,"When writing console commands, it is common to gather input from the user through arguments or options. Lunox makes it very convenient to define the input you expect from the user using the ",(0,i.kt)("inlineCode",{parentName:"p"},"signature")," property on your commands. The signature property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax."),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,"All user supplied arguments and options are wrapped in curly braces. In the following example, the command defines one required argument: ",(0,i.kt)("inlineCode",{parentName:"p"},"user"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'protected signature: string = "maild:send {user}"\n')),(0,i.kt)("p",null,"You may also make arguments optional or define default values for arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Optional argument...\n'mail:send {user?}'\n \n// Optional argument with default value...\n'mail:send {user=foo}'\n")),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("p",null,"Options, like arguments, are another form of user input. Options are prefixed by two or one hyphens (",(0,i.kt)("inlineCode",{parentName:"p"},"--")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),") when they are provided via the command line. There are two types of options: those that receive a value and those that don't. Options that don't receive a value serve as a boolean \"switch\". Let's take a look at an example of this type of option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The name and signature of the console command.\n */\nprotected signature: string = 'mail:send {user} {--queue}';\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--queue")," switch may be specified when calling the Artisan command. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"--queue")," switch is passed, the value of the option will be ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". Otherwise, the value will be ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm artisan mail:send 1 --queue\n")),(0,i.kt)("h3",{id:"options-with-values"},"Options With Values"),(0,i.kt)("p",null,"Next, let's take a look at an option that expects a value. If the user must specify a value for an option, you should suffix the option name with a ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," sign:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The name and signature of the console command.\n */\nprotected signature: string = 'mail:send {user} {--queue=}';\n")),(0,i.kt)("p",null,"In this example, the user may pass a value for the option like so. If the option is not specified when invoking the command, its value will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm artisan mail:send 1 --queue=default\n")),(0,i.kt)("p",null,"You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"'mail:send {user} {--queue=default}'\n")),(0,i.kt)("h3",{id:"option-shortcut"},"Option Shortcut"),(0,i.kt)("p",null,"To assign a shortcut when defining an option, you may specify it before the option name and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," character as a delimiter to separate the shortcut from the full option name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"'mail:send {user} {--Q|queue}'\n")),(0,i.kt)("p",null,"When invoking the command on your terminal, option shortcuts should be prefixed with a single hyphen:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm artisan mail:send 1 -Q\n")),(0,i.kt)("h3",{id:"input-descriptions"},"Input Descriptions"),(0,i.kt)("p",null,"You may assign descriptions to input arguments and options by separating the argument name from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The name and signature of the console command.\n */\nprotected signature: string = `mail:send\n                        {user : The ID of the user}\n                        {--queue : Whether the job should be queued}`;\n")),(0,i.kt)("h2",{id:"command-io"},"Command I/O"),(0,i.kt)("h3",{id:"retrieving-input"},"Retrieving Input"),(0,i.kt)("p",null,"While your command is executing, you will likely need to access the values for the arguments and options accepted by your command. To do so, you may use the argument and option methods. If an ",(0,i.kt)("inlineCode",{parentName:"p"},"argument")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," does not exist, ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," will be returned:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"public handle()\n{\n   const userId = this.argument('user');\n}\n")),(0,i.kt)("p",null,"If you need to retrieve all of the arguments as an ",(0,i.kt)("inlineCode",{parentName:"p"},"object"),", call the ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const arguments = this.arguments()\n")),(0,i.kt)("p",null,"Options may be retrieved just as easily as arguments using the ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," method. To retrieve all of the options as an ",(0,i.kt)("inlineCode",{parentName:"p"},"object"),", call the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Retrieve a specific option...\nconst queueName = this.option('queue');\n \n// Retrieve all options as an array...\nconst options = this.options();\n")),(0,i.kt)("h3",{id:"writing-output"},"Writing Output"),(0,i.kt)("p",null,"To send output to the console, you may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"line"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"newLine"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"comment"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," methods. Each of these methods will use appropriate ANSI colors for their purpose. For example, let's display some general information to the user. Typically, the info method will display in the console as green colored text:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.info('Job Completed');\n")),(0,i.kt)("p",null,"To display an error message, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," method. Error message text is typically displayed in red:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.error('Something went wrong!');\n")),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"line")," method to display plain, uncolored text:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.line('Display this on the screen');\n")),(0,i.kt)("p",null,"You may use the ",(0,i.kt)("inlineCode",{parentName:"p"},"newLine")," method to display a blank line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// Write a single blank line...\nthis.newLine();\n \n// Write three blank lines...\nthis.newLine(3);\n")),(0,i.kt)("h2",{id:"registering-commands"},"Registering Commands"),(0,i.kt)("p",null,"All of your console commands are registered within your application's ",(0,i.kt)("inlineCode",{parentName:"p"},"app/Console/Kernel"),' class, which is your application\'s "console kernel". Within the ',(0,i.kt)("inlineCode",{parentName:"p"},"commands")," method of this class, you will see a call to the kernel's ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method will scan the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/Console/Commands")," directory and automatically register each command it contains with Artisan. You are even free to make additional calls to the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," method to scan other directories for Artisan commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Register the commands for the application.\n */\nprotected async commands()\n{\n    await this.load(base_path("app/Console/Command"));\n    await this.load(base_path("app/Modules/Order/Command"));\n \n    // ...\n}\n')))}m.isMDXComponent=!0},3672:function(e,n,t){n.Z=t.p+"assets/images/tinker-34fea44ccda00115907f80818587f116.gif"}}]);