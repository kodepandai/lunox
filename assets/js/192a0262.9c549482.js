"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[6153],{9613:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4749:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(1163),a=(r(9496),r(9613));const o={sidebar_position:1},i="Routing",s={unversionedId:"basics/routing",id:"basics/routing",title:"Routing",description:"Basic Routing",source:"@site/docs/basics/routing.md",sourceDirName:"basics",slug:"/basics/routing",permalink:"/docs/basics/routing",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/routing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Facades",permalink:"/docs/architecture-concepts/facades"},next:{title:"Middleware",permalink:"/docs/basics/middleware"}},l={},u=[{value:"Basic Routing",id:"basic-routing",level:2},{value:"Default Route Files",id:"default-route-files",level:2},{value:"Available Route Methods",id:"available-route-methods",level:2},{value:"Route Parameters",id:"route-parameters",level:2},{value:"Route Action",id:"route-action",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routing"},"Routing"),(0,a.kt)("h2",{id:"basic-routing"},"Basic Routing"),(0,a.kt)("p",null,"Routing in Lunox is as simple as Laravel's routing. To register a route, simply use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Route")," facade. The method accepts a URI and a closure as the route callback."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Route } from "@lunoxjs/core/facades";\n\nRoute.get("/greetings", () => "Hello");\n')),(0,a.kt)("h2",{id:"default-route-files"},"Default Route Files"),(0,a.kt)("p",null,"All Lunox routes are predefined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"routes")," folder. There are two files: ",(0,a.kt)("inlineCode",{parentName:"p"},"api.ts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"web.ts"),". If you need access to sessions, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"web.ts")," file to register your routes. Otherwise, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"api.ts")," file. Both of these files are registered in the ",(0,a.kt)("inlineCode",{parentName:"p"},"app/Providers/RouteServiceProvider"),". You can add additional route files there."),(0,a.kt)("p",null,"If you look at the registration of ",(0,a.kt)("inlineCode",{parentName:"p"},"routes/web"),", you will see that this route uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," middleware. This middleware is referenced in ",(0,a.kt)("inlineCode",{parentName:"p"},"app/Http/Kernel.ts")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"middlewareGroups")," array list. We will talk about middleware later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class Kernel extends BaseKernel {\n  protected middleware = [CorsMiddleware];\n\n  protected middlewareGroups = {\n    web: [StartSession], // <-- here is the web middleware declared.\n  };\n\n  protected routeMiddleware = {\n    auth: AuthMiddleware,\n    session: SessionMiddleware,\n  };\n}\n")),(0,a.kt)("h2",{id:"available-route-methods"},"Available Route Methods"),(0,a.kt)("p",null,"Currently, the following route methods are available:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"- Route.get(uri: string, action: RouteAction)\n- Route.post(uri: string, action: RouteAction)\n- Route.delete(uri: string, action: RouteAction);\n- Route.patch(uri: string, action: RouteAction);\n- Route.put(uri: string, action: RouteAction);\n- Route.all(uri: string, action: RouteAction);\n- Route.getRoutes() // returns all registered routes\n- Route.prefix(prefix: string) // adds a prefix to the route\n- Route.middleware(middleware: string | Middleware | (string | Middleware)[]) // adds middleware to the route\n- Route.group(callback: string | Callback): Promise<void>; // groups routes\n")),(0,a.kt)("h2",{id:"route-parameters"},"Route Parameters"),(0,a.kt)("p",null,"Lunox is built on top of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukeed/polka"},"Polka")," server, so the URI patterns are inherited from it. Here are some examples of URI patterns:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"- static (/users)\n- named parameters (/users/:id)\n- nested parameters (/users/:id/books/:title)\n- optional parameters (/users/:id?/books/:title?)\n- any match / wildcards (/users/*)\n")),(0,a.kt)("h2",{id:"route-action"},"Route Action"),(0,a.kt)("p",null,"For now, we cannot perform dependency injection in route actions like we can in Laravel. So, to achieve Laravel-like behavior in route actions, remember that the first parameter of the route action is always the ",(0,a.kt)("inlineCode",{parentName:"p"},"Request")," instance, and the rest are the route parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Route } from "@lunoxjs/core/facades";\nimport { Request } from "@lunoxjs/core";\n\nRoute.get("/hello/{id}/{message}", (req: Request, id, message) => {\n  console.log(req instanceof Request); // returns true\n  console.log(id); // returns the "id" parameter\n  console.log(message); // returns the "message" parameter\n\n  // We can access all request methods here\n  req.all();\n  req.get("user_id");\n  // We will learn more about the Request instance later\n\n  // using global request() helper also works\n  request().all();\n  request().get("user_id");\n\n  return "OK";\n  // Don\'t forget to return something here;\n});\n')))}p.isMDXComponent=!0}}]);