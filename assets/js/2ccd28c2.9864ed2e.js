"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[1274],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),u=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,g=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return n?i.createElement(g,s(s({ref:t},c),{},{components:n})):i.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<a;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=n(1163),r=(n(9496),n(9613));const a={sidebar_position:4},s="HTTP Request",l={unversionedId:"basics/request",id:"basics/request",title:"HTTP Request",description:"Introduction",source:"@site/docs/basics/request.md",sourceDirName:"basics",slug:"/basics/request",permalink:"/docs/basics/request",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/request.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/docs/basics/controllers"},next:{title:"HTTP Responses",permalink:"/docs/basics/responses"}},o={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Accessing the Request",id:"accessing-the-request",level:2},{value:"Accessing Request Instance in Middleware",id:"accessing-request-instance-in-middleware",level:3},{value:"Accessing Request Instance in Route Actions",id:"accessing-request-instance-in-route-actions",level:3},{value:"Accessing Request in Views",id:"accessing-request-in-views",level:3},{value:"Retrieving Input",id:"retrieving-input",level:2},{value:"Retrieving All Input",id:"retrieving-all-input",level:3},{value:"Retrieving Single Input",id:"retrieving-single-input",level:3},{value:"Retrieving a Portion of the Input Data",id:"retrieving-a-portion-of-the-input-data",level:3},{value:"Merging Additional Input",id:"merging-additional-input",level:3},{value:"Files",id:"files",level:2},{value:"Accessing Form Data",id:"accessing-form-data",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"http-request"},"HTTP Request"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Lunox HTTP Request is just a wrapper for Node.js HTTP requests. We have added some useful methods to this Request instance, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"auth()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"session()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"files()"),"."),(0,r.kt)("h2",{id:"accessing-the-request"},"Accessing the Request"),(0,r.kt)("p",null,"There are several places to access the Lunox HTTP Request instance:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"In middleware;"),(0,r.kt)("li",{parentName:"ol"},"In route actions; and"),(0,r.kt)("li",{parentName:"ol"},"In the ",(0,r.kt)("inlineCode",{parentName:"li"},"onServer")," method of views."),(0,r.kt)("li",{parentName:"ol"},"Using global ",(0,r.kt)("inlineCode",{parentName:"li"},"request()")," helper.")),(0,r.kt)("h3",{id:"accessing-request-instance-in-middleware"},"Accessing Request Instance in Middleware"),(0,r.kt)("p",null,"You can access the request instance in the middleware's ",(0,r.kt)("inlineCode",{parentName:"p"},"handle")," method. Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const SomeMiddleware: Middleware = {\n  async handle(req, next) {\n    console.log(req); // instance of HTTP Request\n  },\n};\n")),(0,r.kt)("h3",{id:"accessing-request-instance-in-route-actions"},"Accessing Request Instance in Route Actions"),(0,r.kt)("p",null,"Remember, the first parameter of a route action is always the request instance. Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'Route.get("/hello", (req: Request, id, message) => {\n  console.log(req instanceof Request); // returns true\n  return "OK";\n});\n')),(0,r.kt)("h3",{id:"accessing-request-in-views"},"Accessing Request in Views"),(0,r.kt)("p",null,"You can also access the request instance in view files by exporting an ",(0,r.kt)("inlineCode",{parentName:"p"},"onServer")," method. We will discuss views in more detail later."),(0,r.kt)("h2",{id:"retrieving-input"},"Retrieving Input"),(0,r.kt)("h3",{id:"retrieving-all-input"},"Retrieving All Input"),(0,r.kt)("p",null,"You can get all incoming request input using the ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," method. It returns an object with key-value pairs representing the input data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"req.all(); // returns an object with key-value pairs\n")),(0,r.kt)("h3",{id:"retrieving-single-input"},"Retrieving Single Input"),(0,r.kt)("p",null,"You can access user input or query data sent to the server using the ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'req.get("user_id");\n')),(0,r.kt)("h3",{id:"retrieving-a-portion-of-the-input-data"},"Retrieving a Portion of the Input Data"),(0,r.kt)("p",null,"If you want to retrieve only a portion of the input data, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"only")," method, which accepts an array of strings representing the desired input fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'req.only(["email", "password"]);\n')),(0,r.kt)("h3",{id:"merging-additional-input"},"Merging Additional Input"),(0,r.kt)("p",null,"You can merge additional data into the current request input. If a key already exists in the current input, the last one provided will be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'req.merge({\n  name: "something",\n});\n')),(0,r.kt)("h2",{id:"files"},"Files"),(0,r.kt)("h3",{id:"accessing-form-data"},"Accessing Form Data"),(0,r.kt)("p",null,"Lunox automatically parses form data. You can access all uploaded files from the request using the ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"allFiles")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// Access a single file\nreq.file("photo"); // returns an instance of the UploadedFile class\n\nreq.allFiles(); // returns an object with key-UploadedFile pairs\n')),(0,r.kt)("p",null,"The result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," method is an ",(0,r.kt)("inlineCode",{parentName:"p"},"UploadedFile")," instance. This instance has some useful methods to access the uploaded file's properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const photo = req.file('photo');\nphoto.path(); // get the uploaded file's path\nphoto.move(directory: string, name?:string|null); // move the file to a specific directory\nphoto.getClientMimeType(); // get the client's MIME type\nphoto.getClientOriginalExtension(); // get the client's original file extension\nphoto.getClientOriginalName(); // get the client's original file name\n")),(0,r.kt)("p",null,"We may add more useful methods in the future."))}d.isMDXComponent=!0}}]);