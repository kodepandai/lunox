"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[1274],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9171:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(5900),i=n(4750),a=(n(9496),n(9613)),o=["components"],l={sidebar_position:4},s="Http Request",c={unversionedId:"basics/request",id:"basics/request",title:"Http Request",description:"Introduction",source:"@site/docs/basics/request.md",sourceDirName:"basics",slug:"/basics/request",permalink:"/lunox/docs/basics/request",editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/request.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Controllers",permalink:"/lunox/docs/basics/controllers"},next:{title:"Http Responses",permalink:"/lunox/docs/basics/responses"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Accessing Request",id:"accessing-request",children:[{value:"Access Request Instance on Middleware",id:"access-request-instance-on-middleware",children:[],level:3},{value:"Access Request Instance from Route Action",id:"access-request-instance-from-route-action",children:[],level:3},{value:"Access Request on View",id:"access-request-on-view",children:[],level:3}],level:2},{value:"Retrieving Input",id:"retrieving-input",children:[{value:"Retrieving All Input",id:"retrieving-all-input",children:[],level:3},{value:"Retrieving Single Input",id:"retrieving-single-input",children:[],level:3},{value:"Retrieving a Portion of the Input Data",id:"retrieving-a-portion-of-the-input-data",children:[],level:3},{value:"Merging Additional Input",id:"merging-additional-input",children:[],level:3}],level:2},{value:"Files",id:"files",children:[{value:"Access Form Data",id:"access-form-data",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"http-request"},"Http Request"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Lunox Http Request is just wrapper for NodeJs http requests. We add some usefull methods on this Request instance, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"auth(), session(), and files()")),(0,a.kt)("h2",{id:"accessing-request"},"Accessing Request"),(0,a.kt)("p",null,"The are three place to access Lunox Http Request instance."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In middleware;"),(0,a.kt)("li",{parentName:"ol"},"In Route action; and"),(0,a.kt)("li",{parentName:"ol"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"onServer")," view method")),(0,a.kt)("h3",{id:"access-request-instance-on-middleware"},"Access Request Instance on Middleware"),(0,a.kt)("p",null,"We can access request instance on middleware's ",(0,a.kt)("inlineCode",{parentName:"p"},"handle")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"\nconst SomeMiddleware: Middleware = {\n    async handle(req, next){\n        console.log(req) // instance of Http Request\n    }\n}\n\n")),(0,a.kt)("h3",{id:"access-request-instance-from-route-action"},"Access Request Instance from Route Action"),(0,a.kt)("p",null,"Remember, first parameter of route action is always ",(0,a.kt)("inlineCode",{parentName:"p"},"request")," instance;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Route.get('/hello', (req: Request, id, message) =>{\n  console.log(req instanceof Request) // return true\n  return 'OK';\n})\n")),(0,a.kt)("h3",{id:"access-request-on-view"},"Access Request on View"),(0,a.kt)("p",null,"We also can access request instance on view file via exporting ",(0,a.kt)("inlineCode",{parentName:"p"},"onServer")," method. We will discuss about view later."),(0,a.kt)("h2",{id:"retrieving-input"},"Retrieving Input"),(0,a.kt)("h3",{id:"retrieving-all-input"},"Retrieving All Input"),(0,a.kt)("p",null,"You can get all incoming request input using ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"req.all() // return object with key - value pair.\n")),(0,a.kt)("h3",{id:"retrieving-single-input"},"Retrieving Single Input"),(0,a.kt)("p",null,"We can access user input or query was sent to server using ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"req.get('user_id');\n")),(0,a.kt)("h3",{id:"retrieving-a-portion-of-the-input-data"},"Retrieving a Portion of the Input Data"),(0,a.kt)("p",null,"If you want to get only portion of input data, we already shipped ",(0,a.kt)("inlineCode",{parentName:"p"},"only")," method that accept array of string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"req.only(['email', 'password']);\n\n")),(0,a.kt)("h3",{id:"merging-additional-input"},"Merging Additional Input"),(0,a.kt)("p",null,"You can merge additional data to current request input. If the key is same as current available input, the last one is used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"req.merge({\n  name: 'something'\n})\n")),(0,a.kt)("h2",{id:"files"},"Files"),(0,a.kt)("h3",{id:"access-form-data"},"Access Form Data"),(0,a.kt)("p",null,"Lunox is auto parsing form data. We can access all files from request using ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"allFiles")," method;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// access single file\nreq.file('photo') // return instance of UploadedFile instance\nreq.allFiles() // return object with key - UploadedFile pair\n")),(0,a.kt)("p",null,"The result of ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," method is ",(0,a.kt)("inlineCode",{parentName:"p"},"UploadedFile")," instance. This instance has some usefull method to access uploaded file property"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const photo = req.file('photo')\nphoto.path() // get uploaded path\nphoto.move(directory: string, name?:string|null) // move file to some directory\nphoto.getClientMimeType() // get client mime type\nphoto.getClientOriginalExtension() // get client original extension\nphoto.getClientOriginalName() // get client original name\n")),(0,a.kt)("p",null,"We will add another usefull method later"))}d.isMDXComponent=!0}}]);