"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[5002],{9613:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?i.createElement(v,o(o({ref:n},c),{},{components:t})):i.createElement(v,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3203:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var i=t(5900),r=t(4750),a=(t(9496),t(9613)),o=["components"],l={sidebar_position:8},s="Validation",u={unversionedId:"basics/validation",id:"basics/validation",title:"Validation",description:"Introduction",source:"@site/docs/basics/validation.md",sourceDirName:"basics",slug:"/basics/validation",permalink:"/lunox/docs/basics/validation",editUrl:"https://github.com/kodepandai/lunox-website/edit/main/docs/basics/validation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Session",permalink:"/lunox/docs/basics/session"},next:{title:"Artisan Console",permalink:"/lunox/docs/digging-deeper/artisan-console"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Writing Validation Logic",id:"writing-validation-logic",children:[],level:2},{value:"Validation Rules",id:"validation-rules",children:[],level:2},{value:"Extending Rules",id:"extending-rules",children:[{value:"Writing Custom Rules",id:"writing-custom-rules",children:[],level:3},{value:"Registering Custom Rules",id:"registering-custom-rules",children:[],level:3}],level:2}],d={toc:c};function p(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validation"},"Validation"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Lunox has builtin validation system, it's can validate your applicatoin's incoming data through Http Request. The common way is using ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," method available on Http Request instance."),(0,a.kt)("h2",{id:"writing-validation-logic"},"Writing Validation Logic"),(0,a.kt)("p",null,"Take an example, we have some method on Controller. We want to validate the incoming request data to it. Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," method is asynchronous."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class UserController extends Controller {\n    async store(req){\n        await req.validate([\n            'title' => 'required|unique:posts,title|maxLength:255'.\n            'body' => 'required'\n        ])\n    }\n}\n")),(0,a.kt)("p",null,"When validation fails, ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationException")," will thrown."),(0,a.kt)("h2",{id:"validation-rules"},"Validation Rules"),(0,a.kt)("p",null,"Under the hood, Lunox use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bitnbytesio/node-input-validator"},"node-input-validator"),". So, we can use all available rules ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bitnbytesio/node-input-validator#rules"},"here")," plus additional rule like ",(0,a.kt)("inlineCode",{parentName:"p"},"unique")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mimes"),"."),(0,a.kt)("h2",{id:"extending-rules"},"Extending Rules"),(0,a.kt)("h3",{id:"writing-custom-rules"},"Writing Custom Rules"),(0,a.kt)("p",null,"Rule is just object with interface of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rule")," from Validation contracts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import type { Rule } from "lunox/dist/Contracts/Validation";\n\nconst Even: Rule = {\n  name: "even",\n  passes: async (args, value) => {\n    return value % 2;\n  },\n  message: "The :attr must be an even number.",\n};\n\nexport default Even;\n\n')),(0,a.kt)("h3",{id:"registering-custom-rules"},"Registering Custom Rules"),(0,a.kt)("p",null,"We can extend validation rules using method ",(0,a.kt)("inlineCode",{parentName:"p"},"extend")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"Validation")," facade on ",(0,a.kt)("inlineCode",{parentName:"p"},"boot")," method of ServiceProvider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {Validator} from "lunox";\nimport Even from "./Rules/Even";\nimport Mimes from "./Rules/Mimes";\n\nclass AppServiceProvider extends ServiceProvider {\n  async register() {\n    // \n  }\n  async boot() {\n    Validator.extend(Even);\n  }\n}\n')),(0,a.kt)("p",null,"Then we can use it in our validation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await req.validate([\n    'total' => 'required|even'\n]);\n")))}p.isMDXComponent=!0}}]);