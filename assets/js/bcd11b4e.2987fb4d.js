"use strict";(self.webpackChunklunox=self.webpackChunklunox||[]).push([[3302],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(1163),o=(n(9496),n(9613));const a={sidebar_position:1},i="Request Lifecycle",l={unversionedId:"architecture-concepts/request-lifecycle",id:"version-1.x/architecture-concepts/request-lifecycle",title:"Request Lifecycle",description:"If you come from php language, there is some difference concept between how request handled in Lunox and Laravel. In Laravel (php), request are handled by application and then application is terminated on each request made. In Lunox (nodejs), application is run on event loop, so the application is not terminated but run continuously. So don't forget to return some response or throw an Exception on every request handled by Lunox so your application is not hang.",source:"@site/versioned_docs/version-1.x/architecture-concepts/request-lifecycle.md",sourceDirName:"architecture-concepts",slug:"/architecture-concepts/request-lifecycle",permalink:"/docs/1.x/architecture-concepts/request-lifecycle",draft:!1,editUrl:"https://github.com/kodepandai/lunox-website/edit/main/versioned_docs/version-1.x/architecture-concepts/request-lifecycle.md",tags:[],version:"1.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Run your Lunox App",permalink:"/docs/1.x/installation/run-lunox-app"},next:{title:"Service Container",permalink:"/docs/1.x/architecture-concepts/service-container"}},s={},c=[{value:"Entry Point",id:"entry-point",level:2},{value:"Http Kernel",id:"http-kernel",level:3},{value:"Console Kernel",id:"console-kernel",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"request-lifecycle"},"Request Lifecycle"),(0,o.kt)("p",null,"If you come from ",(0,o.kt)("inlineCode",{parentName:"p"},"php")," language, there is some difference concept between how request handled in Lunox and Laravel. In Laravel (",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"php")),"), request are handled by application and then application is terminated on each request made. In Lunox (",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"nodejs")),"), application is run on event loop, so the application is not terminated but run continuously. So don't forget to return some response or throw an Exception on every request handled by Lunox so your application is not hang."),(0,o.kt)("p",null,"Because of this difference, some Laravel feature is handled differently in Lunox. For example in Laravel we have Request Facade that resolve http request instance from container. In Lunox, we cannot register http request in container because it will conflict with other user request. Auth and Session Facade have same behaviour. To solve this issue, we only can access request, auth, and session instance only from several path, such as middleware, route action, and ",(0,o.kt)("inlineCode",{parentName:"p"},"onServer")," method (view)."),(0,o.kt)("h2",{id:"entry-point"},"Entry Point"),(0,o.kt)("p",null,"The are two type of entry point on Lunox App. First is Http entry point, second is Console entry point."),(0,o.kt)("h3",{id:"http-kernel"},"Http Kernel"),(0,o.kt)("p",null,"Http Request are handled by Http Kernel. See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kodepandai/lunox/blob/main/index.ts"},"index.ts")," file. This file is where Http Kernel is loaded then continuously handle all Http request. All global function (",(0,o.kt)("inlineCode",{parentName:"p"},"helpers"),") are loaded from ",(0,o.kt)("inlineCode",{parentName:"p"},"autoload.ts")," file. Http Kernel then bootstrap your application bootsrapper, load application config, then register all providers and boot them to system."),(0,o.kt)("h3",{id:"console-kernel"},"Console Kernel"),(0,o.kt)("p",null,"For console application (",(0,o.kt)("em",{parentName:"p"},"for example to run some artisan command"),"), Lunox will run Console Kernel. The main file is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kodepandai/lunox/blob/main/artisan.ts"},"artisan.ts"),". This file load Console Kernel and load your application in console. We will discuss it on ",(0,o.kt)("inlineCode",{parentName:"p"},"Artisan")," part."))}d.isMDXComponent=!0}}]);